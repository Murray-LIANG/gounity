// DO NOT EDIT.
// GENERATED by go:generate at 2019-05-17 11:31:28.030882 +0000 UTC.
package gounity

import (
	"fmt"
	"strings"

	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"
)

// IscsiNode defines `iscsiNode` type.
type IscsiNode struct {
	Resource

	Alias        string       `json:"alias"`
	EthernetPort EthernetPort `json:"ethernetPort"`
	Id           string       `json:"id"`
	Name         string       `json:"name"`
}

var (
	typeNameIscsiNode   = "iscsiNode"
	typeFieldsIscsiNode = strings.Join([]string{
		"alias",
		"ethernetPort",
		"id",
		"name",
	}, ",")
)

type IscsiNodeOperatorGen interface {
	NewIscsiNodeById(id string) *IscsiNode

	NewIscsiNodeByName(name string) *IscsiNode

	GetIscsiNodeById(id string) (*IscsiNode, error)

	GetIscsiNodeByName(name string) (*IscsiNode, error)

	GetIscsiNodes() ([]*IscsiNode, error)

	FillIscsiNodes(respEntries []*instanceResp) ([]*IscsiNode, error)

	FilterIscsiNodes(filter *filter) ([]*IscsiNode, error)
}

// NewIscsiNodeById constructs a `IscsiNode` object with id.
func (u *Unity) NewIscsiNodeById(
	id string,
) *IscsiNode {

	return &IscsiNode{
		Resource: Resource{
			typeName: typeNameIscsiNode, typeFields: typeFieldsIscsiNode, Unity: u,
		},
		Id: id,
	}
}

// NewIscsiNodeByName constructs a `iscsiNode` object with name.
func (u *Unity) NewIscsiNodeByName(
	name string,
) *IscsiNode {

	return &IscsiNode{
		Resource: Resource{
			typeName: typeNameIscsiNode, typeFields: typeFieldsIscsiNode, Unity: u,
		},
		Name: name,
	}
}

// Refresh updates the info from Unity.
func (r *IscsiNode) Refresh() error {

	if r.Id == "" && r.Name == "" {
		return fmt.Errorf(
			"cannot refresh on iscsiNode without Id nor Name, resource:%v", r,
		)
	}

	var (
		latest *IscsiNode
		err    error
	)

	switch r.Id {

	case "":
		if latest, err = r.Unity.GetIscsiNodeByName(r.Name); err != nil {
			return err
		}
		*r = *latest
	default:
		if latest, err = r.Unity.GetIscsiNodeById(r.Id); err != nil {
			return err
		}
		*r = *latest
	}
	return nil
}

// GetIscsiNodeById retrives the `iscsiNode` by given its id.
func (u *Unity) GetIscsiNodeById(
	id string,
) (*IscsiNode, error) {

	res := u.NewIscsiNodeById(id)
	err := u.GetInstanceById(res.typeName, id, res.typeFields, res)
	if err != nil {
		if IsUnityError(err) {
			return nil, err
		}
		return nil, errors.Wrap(err, "get iscsiNode by id failed")
	}
	return res, nil
}

// GetIscsiNodeByName retrives the `iscsiNode` by given its name.
func (u *Unity) GetIscsiNodeByName(
	name string,
) (*IscsiNode, error) {

	res := u.NewIscsiNodeByName(name)
	if err := u.GetInstanceByName(res.typeName, name, res.typeFields, res); err != nil {
		return nil, errors.Wrap(err, "get iscsiNode by name failed")
	}
	return res, nil
}

// GetIscsiNodes retrives all `iscsiNode` objects.
func (u *Unity) GetIscsiNodes() ([]*IscsiNode, error) {

	return u.FilterIscsiNodes(nil)
}

// FilterIscsiNodes filters the `iscsiNode` objects by given filters.
func (u *Unity) FilterIscsiNodes(
	filter *filter,
) ([]*IscsiNode, error) {

	respEntries, err := u.GetCollection(typeNameIscsiNode, typeFieldsIscsiNode, filter)
	if err != nil {
		return nil, errors.Wrap(err, "filter iscsiNode failed")
	}
	res, err := u.FillIscsiNodes(respEntries)
	if err != nil {
		return nil, errors.Wrap(err, "fill iscsiNodes failed")
	}
	return res, nil
}

// FillIscsiNodes generates the `iscsiNode` objects from collection query response.
func (u *Unity) FillIscsiNodes(
	respEntries []*instanceResp,
) ([]*IscsiNode, error) {

	resSlice := []*IscsiNode{}
	for _, entry := range respEntries {
		res := u.NewIscsiNodeById("") // empty id for fake `IscsiNode` object
		if err := u.unmarshalResource(entry.Content, res); err != nil {
			return nil, errors.Wrap(err, "decode to IscsiNode failed")
		}
		resSlice = append(resSlice, res)
	}
	return resSlice, nil
}

// Repr represents a `iscsiNode` object using its id.
func (r *IscsiNode) Repr() *idRepresent {

	log := logrus.WithField("iscsiNode", r)
	if r.Id == "" {
		log.Info("refreshing iscsiNode from unity")
		err := r.Refresh()
		if err != nil {
			log.WithError(err).Error("refresh iscsiNode from unity failed")
			return nil
		}
	}
	return &idRepresent{Id: r.Id}
}
