// DO NOT EDIT.
// GENERATED by go:generate at 2019-06-06 09:02:53.375751 +0000 UTC.
package gounity

import (
	"fmt"
	"strings"

	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"
)

// StorageResource defines `storageResource` type.
type StorageResource struct {
	Resource

	Id          string      `json:"id"`
	Name        string      `json:"name"`
	Health      *Health     `json:"health"`
	Description string      `json:"description"`
	Filesystem  *Filesystem `json:"filesystem"`
}

var (
	typeNameStorageResource   = "storageResource"
	typeFieldsStorageResource = strings.Join([]string{
		"id",
		"name",
		"health",
		"description",
		"filesystem",
	}, ",")
)

type StorageResourceOperatorGen interface {
	NewStorageResourceById(id string) *StorageResource

	NewStorageResourceByName(name string) *StorageResource

	GetStorageResourceById(id string) (*StorageResource, error)

	GetStorageResourceByName(name string) (*StorageResource, error)

	GetStorageResources() ([]*StorageResource, error)

	FillStorageResources(respEntries []*instanceResp) ([]*StorageResource, error)

	FilterStorageResources(filter *filter) ([]*StorageResource, error)
}

// NewStorageResourceById constructs a `StorageResource` object with id.
func (u *Unity) NewStorageResourceById(
	id string,
) *StorageResource {

	return &StorageResource{
		Resource: Resource{
			typeName: typeNameStorageResource, typeFields: typeFieldsStorageResource, Unity: u,
		},
		Id: id,
	}
}

// NewStorageResourceByName constructs a `storageResource` object with name.
func (u *Unity) NewStorageResourceByName(
	name string,
) *StorageResource {

	return &StorageResource{
		Resource: Resource{
			typeName: typeNameStorageResource, typeFields: typeFieldsStorageResource, Unity: u,
		},
		Name: name,
	}
}

// Refresh updates the info from Unity.
func (r *StorageResource) Refresh() error {

	if r.Id == "" && r.Name == "" {
		return fmt.Errorf(
			"cannot refresh on storageResource without Id nor Name, resource:%v", r,
		)
	}

	var (
		latest *StorageResource
		err    error
	)

	switch r.Id {

	case "":
		if latest, err = r.Unity.GetStorageResourceByName(r.Name); err != nil {
			return err
		}
		*r = *latest
	default:
		if latest, err = r.Unity.GetStorageResourceById(r.Id); err != nil {
			return err
		}
		*r = *latest
	}
	return nil
}

// GetStorageResourceById retrives the `storageResource` by given its id.
func (u *Unity) GetStorageResourceById(
	id string,
) (*StorageResource, error) {

	res := u.NewStorageResourceById(id)
	err := u.GetInstanceById(res.typeName, id, res.typeFields, res)
	if err != nil {
		if IsUnityError(err) {
			return nil, err
		}
		return nil, errors.Wrap(err, "get storageResource by id failed")
	}
	return res, nil
}

// GetStorageResourceByName retrives the `storageResource` by given its name.
func (u *Unity) GetStorageResourceByName(
	name string,
) (*StorageResource, error) {

	res := u.NewStorageResourceByName(name)
	if err := u.GetInstanceByName(res.typeName, name, res.typeFields, res); err != nil {
		return nil, errors.Wrap(err, "get storageResource by name failed")
	}
	return res, nil
}

// GetStorageResources retrives all `storageResource` objects.
func (u *Unity) GetStorageResources() ([]*StorageResource, error) {

	return u.FilterStorageResources(nil)
}

// FilterStorageResources filters the `storageResource` objects by given filters.
func (u *Unity) FilterStorageResources(
	filter *filter,
) ([]*StorageResource, error) {

	respEntries, err := u.GetCollection(typeNameStorageResource, typeFieldsStorageResource, filter)
	if err != nil {
		return nil, errors.Wrap(err, "filter storageResource failed")
	}
	res, err := u.FillStorageResources(respEntries)
	if err != nil {
		return nil, errors.Wrap(err, "fill storageResources failed")
	}
	return res, nil
}

// FillStorageResources generates the `storageResource` objects from collection query response.
func (u *Unity) FillStorageResources(
	respEntries []*instanceResp,
) ([]*StorageResource, error) {

	resSlice := []*StorageResource{}
	for _, entry := range respEntries {
		res := u.NewStorageResourceById("") // empty id for fake `StorageResource` object
		if err := u.unmarshalResource(entry.Content, res); err != nil {
			return nil, errors.Wrap(err, "decode to StorageResource failed")
		}
		resSlice = append(resSlice, res)
	}
	return resSlice, nil
}

// Repr represents a `storageResource` object using its id.
func (r *StorageResource) Repr() *idRepresent {

	log := logrus.WithField("storageResource", r)
	if r.Id == "" {
		log.Info("refreshing storageResource from unity")
		err := r.Refresh()
		if err != nil {
			log.WithError(err).Error("refresh storageResource from unity failed")
			return nil
		}
	}
	return &idRepresent{Id: r.Id}
}
