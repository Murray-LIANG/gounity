// DO NOT EDIT.
// GENERATED by go:generate at 2019-05-15 06:25:01.189915819 +0000 UTC.
package gounity

import (
	"fmt"
	"strings"

	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"
)

// Filesystem defines `filesystem` type.
type Filesystem struct {
	Resource

	Id              string           `json:"id"`
	Name            string           `json:"name"`
	Health          *Health          `json:"health"`
	Description     string           `json:"description"`
	StorageResource *StorageResource `json:"storageResource"`
}

var (
	typeNameFilesystem   = "filesystem"
	typeFieldsFilesystem = strings.Join([]string{
		"id",
		"name",
		"health",
		"description",
		"storageResource",
	}, ",")
)

type FilesystemOperatorGen interface {
	NewFilesystemById(id string) *Filesystem

	NewFilesystemByName(name string) *Filesystem

	GetFilesystemById(id string) (*Filesystem, error)

	GetFilesystemByName(name string) (*Filesystem, error)

	GetFilesystems() ([]*Filesystem, error)

	FillFilesystems(respEntries []*instanceResp) ([]*Filesystem, error)

	FilterFilesystems(filter *filter) ([]*Filesystem, error)
}

// NewFilesystemById constructs a `Filesystem` object with id.
func (u *Unity) NewFilesystemById(
	id string,
) *Filesystem {

	return &Filesystem{
		Resource: Resource{
			typeName: typeNameFilesystem, typeFields: typeFieldsFilesystem, Unity: u,
		},
		Id: id,
	}
}

// NewFilesystemByName constructs a `filesystem` object with name.
func (u *Unity) NewFilesystemByName(
	name string,
) *Filesystem {

	return &Filesystem{
		Resource: Resource{
			typeName: typeNameFilesystem, typeFields: typeFieldsFilesystem, Unity: u,
		},
		Name: name,
	}
}

// Refresh updates the info from Unity.
func (r *Filesystem) Refresh() error {

	if r.Id == "" && r.Name == "" {
		return fmt.Errorf(
			"cannot refresh on filesystem without Id nor Name, resource:%v", r,
		)
	}

	var (
		latest *Filesystem
		err    error
	)

	switch r.Id {

	case "":
		if latest, err = r.Unity.GetFilesystemByName(r.Name); err != nil {
			return err
		}
		*r = *latest
	default:
		if latest, err = r.Unity.GetFilesystemById(r.Id); err != nil {
			return err
		}
		*r = *latest
	}
	return nil
}

// GetFilesystemById retrives the `filesystem` by given its id.
func (u *Unity) GetFilesystemById(
	id string,
) (*Filesystem, error) {

	res := u.NewFilesystemById(id)
	err := u.GetInstanceById(res.typeName, id, res.typeFields, res)
	if err != nil {
		if IsUnityError(err) {
			return nil, err
		}
		return nil, errors.Wrap(err, "get filesystem by id failed")
	}
	return res, nil
}

// GetFilesystemByName retrives the `filesystem` by given its name.
func (u *Unity) GetFilesystemByName(
	name string,
) (*Filesystem, error) {

	res := u.NewFilesystemByName(name)
	if err := u.GetInstanceByName(res.typeName, name, res.typeFields, res); err != nil {
		return nil, errors.Wrap(err, "get filesystem by name failed")
	}
	return res, nil
}

// GetFilesystems retrives all `filesystem` objects.
func (u *Unity) GetFilesystems() ([]*Filesystem, error) {

	return u.FilterFilesystems(nil)
}

// FilterFilesystems filters the `filesystem` objects by given filters.
func (u *Unity) FilterFilesystems(
	filter *filter,
) ([]*Filesystem, error) {

	respEntries, err := u.GetCollection(typeNameFilesystem, typeFieldsFilesystem, filter)
	if err != nil {
		return nil, errors.Wrap(err, "filter filesystem failed")
	}
	res, err := u.FillFilesystems(respEntries)
	if err != nil {
		return nil, errors.Wrap(err, "fill filesystems failed")
	}
	return res, nil
}

// FillFilesystems generates the `filesystem` objects from collection query response.
func (u *Unity) FillFilesystems(
	respEntries []*instanceResp,
) ([]*Filesystem, error) {

	resSlice := []*Filesystem{}
	for _, entry := range respEntries {
		res := u.NewFilesystemById("") // empty id for fake `Filesystem` object
		if err := u.unmarshalResource(entry.Content, res); err != nil {
			return nil, errors.Wrap(err, "decode to Filesystem failed")
		}
		resSlice = append(resSlice, res)
	}
	return resSlice, nil
}

// Repr represents a `filesystem` object using its id.
func (r *Filesystem) Repr() *idRepresent {

	log := logrus.WithField("filesystem", r)
	if r.Id == "" {
		log.Info("refreshing filesystem from unity")
		err := r.Refresh()
		if err != nil {
			log.WithError(err).Error("refresh filesystem from unity failed")
			return nil
		}
	}
	return &idRepresent{Id: r.Id}
}

// Delete deletes a filesystem object.
func (r *Filesystem) Delete() error {

	log := logrus.WithField("filesystem", r)
	if r.StorageResource == nil {
		log.Info("refreshing filesystem from unity")
		err := r.Refresh()
		if err != nil {
			return errors.Wrap(err, "refresh filesystem from unity failed")
		}
	}

	err := r.Unity.DeleteInstance(typeStorageResource, r.StorageResource.Id)
	if err != nil {
		return errors.Wrap(err, "delete filesystem from unity failed")
	}
	return nil
}
