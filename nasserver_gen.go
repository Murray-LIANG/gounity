// DO NOT EDIT.
// GENERATED by go:generate at 2019-01-01 09:01:44.297315917 +0000 UTC.
package gounity

import (
	"fmt"
	"strings"

	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"
)

// NasServer defines `nasServer` type.
type NasServer struct {
	Resource

	Id     string  `json:"id"`
	Name   string  `json:"name"`
	Health *Health `json:"health"`
}

var (
	typeNameNasServer   = "nasServer"
	typeFieldsNasServer = strings.Join([]string{
		"id",
		"name",
		"health",
	}, ",")
)

type NasServerOperatorGen interface {
	NewNasServerById(id string) *NasServer

	NewNasServerByName(name string) *NasServer

	GetNasServerById(id string) (*NasServer, error)

	GetNasServerByName(name string) (*NasServer, error)

	GetNasServers() ([]*NasServer, error)

	FillNasServers(respEntries []*instanceResp) ([]*NasServer, error)

	FilterNasServers(filter *filter) ([]*NasServer, error)
}

// NewNasServerById constructs a `NasServer` object with id.
func (u *Unity) NewNasServerById(
	id string,
) *NasServer {

	return &NasServer{
		Resource: Resource{
			typeName: typeNameNasServer, typeFields: typeFieldsNasServer, Unity: u,
		},
		Id: id,
	}
}

// NewNasServerByName constructs a `nasServer` object with name.
func (u *Unity) NewNasServerByName(
	name string,
) *NasServer {

	return &NasServer{
		Resource: Resource{
			typeName: typeNameNasServer, typeFields: typeFieldsNasServer, Unity: u,
		},
		Name: name,
	}
}

// Refresh updates the info from Unity.
func (r *NasServer) Refresh() error {

	if r.Id == "" && r.Name == "" {
		return fmt.Errorf(
			"cannot refresh on nasServer without Id nor Name, resource:%v", r,
		)
	}

	var (
		latest *NasServer
		err    error
	)

	switch r.Id {

	case "":
		if latest, err = r.Unity.GetNasServerByName(r.Name); err != nil {
			return err
		}
		*r = *latest
	default:
		if latest, err = r.Unity.GetNasServerById(r.Id); err != nil {
			return err
		}
		*r = *latest
	}
	return nil
}

// GetNasServerById retrives the `nasServer` by given its id.
func (u *Unity) GetNasServerById(
	id string,
) (*NasServer, error) {

	res := u.NewNasServerById(id)
	err := u.GetInstanceById(res.typeName, id, res.typeFields, res)
	if err != nil {
		if IsUnityError(err) {
			return nil, err
		}
		return nil, errors.Wrap(err, "get nasServer by id failed")
	}
	return res, nil
}

// GetNasServerByName retrives the `nasServer` by given its name.
func (u *Unity) GetNasServerByName(
	name string,
) (*NasServer, error) {

	res := u.NewNasServerByName(name)
	if err := u.GetInstanceByName(res.typeName, name, res.typeFields, res); err != nil {
		return nil, errors.Wrap(err, "get nasServer by name failed")
	}
	return res, nil
}

// GetNasServers retrives all `nasServer` objects.
func (u *Unity) GetNasServers() ([]*NasServer, error) {

	return u.FilterNasServers(nil)
}

// FilterNasServers filters the `nasServer` objects by given filters.
func (u *Unity) FilterNasServers(
	filter *filter,
) ([]*NasServer, error) {

	respEntries, err := u.GetCollection(typeNameNasServer, typeFieldsNasServer, filter)
	if err != nil {
		return nil, errors.Wrap(err, "filter nasServer failed")
	}
	res, err := u.FillNasServers(respEntries)
	if err != nil {
		return nil, errors.Wrap(err, "fill nasServers failed")
	}
	return res, nil
}

// FillNasServers generates the `nasServer` objects from collection query response.
func (u *Unity) FillNasServers(
	respEntries []*instanceResp,
) ([]*NasServer, error) {

	resSlice := []*NasServer{}
	for _, entry := range respEntries {
		res := u.NewNasServerById("") // empty id for fake `NasServer` object
		if err := u.unmarshalResource(entry.Content, res); err != nil {
			return nil, errors.Wrap(err, "decode to NasServer failed")
		}
		resSlice = append(resSlice, res)
	}
	return resSlice, nil
}

// Repr represents a `nasServer` object using its id.
func (r *NasServer) Repr() *idRepresent {

	log := logrus.WithField("nasServer", r)
	if r.Id == "" {
		log.Info("refreshing nasServer from unity")
		err := r.Refresh()
		if err != nil {
			log.WithError(err).Error("refresh nasServer from unity failed")
			return nil
		}
	}
	return &idRepresent{Id: r.Id}
}
