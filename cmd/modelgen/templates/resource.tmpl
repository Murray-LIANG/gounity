// DO NOT EDIT.
// GENERATED by go:generate at {{ .Timestamp }}.
package {{ .PackageName }}
{{ if not .IsEmbedded }}
import (
	"fmt"
	"strings"

	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"
){{ end }}

// {{ .CapTypeName }} defines `{{ .TypeName }}` type.
type {{ .CapTypeName }} struct {
	Resource
	{{ range .Fields }}
	{{ .CapName }} {{ .Type }} {{ .JsonSrc }}{{ end }}
}
{{ if not .IsEmbedded }}
var (
	typeName{{ .CapTypeName }} = "{{ .TypeName }}"
	typeFields{{ .CapTypeName }} = strings.Join([]string{ {{ range .FieldNames }}
		"{{ . }}",{{ end }}
	}, ",")
)

type {{ .CapTypeName }}OperatorGen interface {
	New{{ .CapTypeName }}ById(id string) *{{ .CapTypeName }}
{{ if .HasNameField }}
	New{{ .CapTypeName }}ByName(name string) *{{ .CapTypeName }}{{ end }}

	Get{{ .CapTypeName }}ById(id string) (*{{ .CapTypeName }}, error)

{{ if .HasNameField }}
	Get{{ .CapTypeName }}ByName(name string) (*{{ .CapTypeName }}, error){{ end }}

	Get{{ .CapTypeName }}s() ([]*{{ .CapTypeName }}, error)

	Fill{{ .CapTypeName }}s(respEntries []*instanceResp) ([]*{{ .CapTypeName }}, error)

	Filter{{ .CapTypeName }}s(filter *filter) ([]*{{ .CapTypeName }}, error)
}

// New{{ .CapTypeName }}ById constructs a `{{ .CapTypeName }}` object with id.
func (u *Unity) New{{ .CapTypeName }}ById(
	id string,
) *{{ .CapTypeName }} {

	return &{{ .CapTypeName }}{
		Resource: Resource{
			typeName: typeName{{ .CapTypeName }}, typeFields: typeFields{{ .CapTypeName }}, Unity: u,
		},
		Id: id,
	}
}

{{ if .HasNameField }}
// New{{ .CapTypeName }}ByName constructs a `{{ .TypeName }}` object with name.
func (u *Unity) New{{ .CapTypeName }}ByName(
	name string,
) *{{ .CapTypeName }} {

	return &{{ .CapTypeName }}{
		Resource: Resource{
			typeName: typeName{{ .CapTypeName }}, typeFields: typeFields{{ .CapTypeName }}, Unity: u,
		},
		Name: name,
	}
}{{ end }}

// Refresh updates the info from Unity.
func (r *{{ .CapTypeName }}) Refresh() error {

	if r.Id == ""{{ if .HasNameField }} && r.Name == ""{{ end }} {
		return fmt.Errorf(
			"cannot refresh on {{ .TypeName }} without Id nor Name, resource:%v", r,
		)
	}

	var (
		latest *{{ .CapTypeName }}
		err    error
	)

	switch r.Id {
{{ if .HasNameField }}
	case "":
		if latest, err = r.Unity.Get{{ .CapTypeName }}ByName(r.Name); err != nil {
			return err
		}
		*r = *latest{{ end }}
	default:
		if latest, err = r.Unity.Get{{ .CapTypeName }}ById(r.Id); err != nil {
			return err
		}
		*r = *latest
	}
	return nil
}

// Get{{ .CapTypeName }}ById retrives the `{{ .TypeName }}` by given its id.
func (u *Unity) Get{{ .CapTypeName }}ById(
	id string,
) (*{{ .CapTypeName }}, error) {

	res := u.New{{ .CapTypeName }}ById(id)
	err := u.GetInstanceById(res.typeName, id, res.typeFields, res)
	if err != nil {
		if IsUnityError(err) {
			return nil, err
		}
		return nil, errors.Wrap(err, "get {{ .TypeName }} by id failed")
	}
	return res, nil
}

{{ if .HasNameField }}
// Get{{ .CapTypeName }}ByName retrives the `{{ .TypeName }}` by given its name.
func (u *Unity) Get{{ .CapTypeName }}ByName(
	name string,
) (*{{ .CapTypeName }}, error) {

	res := u.New{{ .CapTypeName }}ByName(name)
	if err := u.GetInstanceByName(res.typeName, name, res.typeFields, res); err != nil {
		return nil, errors.Wrap(err, "get {{ .TypeName }} by name failed")
	}
	return res, nil
}{{ end }}

// Get{{ .CapTypeName }}s retrives all `{{ .TypeName }}` objects.
func (u *Unity) Get{{ .CapTypeName }}s() ([]*{{ .CapTypeName }}, error) {

	return u.Filter{{ .CapTypeName }}s(nil)
}

// Filter{{ .CapTypeName }}s filters the `{{ .TypeName }}` objects by given filters.
func (u *Unity) Filter{{ .CapTypeName }}s(
	filter *filter,
) ([]*{{ .CapTypeName }}, error) {

	respEntries, err := u.GetCollection(typeName{{ .CapTypeName }}, typeFields{{ .CapTypeName }}, filter)
	if err != nil {
		return nil, errors.Wrap(err, "filter {{ .TypeName }} failed")
	}
	res, err := u.Fill{{ .CapTypeName }}s(respEntries)
	if err != nil {
		return nil, errors.Wrap(err, "fill {{ .TypeName }}s failed")
	}
	return res, nil
}

// Fill{{ .CapTypeName }}s generates the `{{ .TypeName }}` objects from collection query response.
func (u *Unity) Fill{{ .CapTypeName }}s(
	respEntries []*instanceResp,
) ([]*{{ .CapTypeName }}, error) {

	resSlice := []*{{ .CapTypeName }}{}
	for _, entry := range respEntries {
		res := u.New{{ .CapTypeName }}ById("") // empty id for fake `{{ .CapTypeName }}` object
		if err := u.unmarshalResource(entry.Content, res); err != nil {
			return nil, errors.Wrap(err, "decode to {{ .CapTypeName }} failed")
		}
		resSlice = append(resSlice, res)
	}
	return resSlice, nil
}

// Repr represents a `{{ .TypeName }}` object using its id.
func (r *{{ .CapTypeName }}) Repr() *idRepresent {

	log := logrus.WithField("{{ .TypeName }}", r)
	if r.Id == "" {
		log.Info("refreshing {{ .TypeName }} from unity")
		err := r.Refresh()
		if err != nil {
			log.WithError(err).Error("refresh {{ .TypeName }} from unity failed")
			return nil
		}
	}
	return &idRepresent{Id: r.Id}
}{{ if .HasStorageResourceField }}

// Delete deletes a {{ .TypeName }} object.
func (r *{{ .CapTypeName }}) Delete() error {

	log := logrus.WithField("{{ .TypeName }}", r)
	if r.StorageResource == nil {
		log.Info("refreshing {{ .TypeName }} from unity")
		err := r.Refresh()
		if err != nil {
			return errors.Wrap(err, "refresh {{ .TypeName }} from unity failed")
		}
	}

	err := r.Unity.DeleteInstance(typeStorageResource, r.StorageResource.Id)
	if err != nil {
		return errors.Wrap(err, "delete {{ .TypeName }} from unity failed")
	}
	return nil
}{{ end }}{{ end }}