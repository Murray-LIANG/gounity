// DO NOT EDIT.
// GENERATED by go:generate at 2019-06-05 15:12:15.9971 +0000 UTC.
package gounity

import (
	"fmt"
	"strings"

	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"
)

// IscsiPortal defines `iscsiPortal` type.
type IscsiPortal struct {
	Resource

	EthernetPort      *EthernetPort         `json:"ethernetPort"`
	Gateway           string                `json:"gateway"`
	Id                string                `json:"id"`
	IpAddress         string                `json:"ipAddress"`
	IpProtocolVersion IpProtocolVersionEnum `json:"ipProtocolVersion"`
	IscsiNode         *IscsiNode            `json:"iscsiNode"`
	Netmask           string                `json:"netmask"`
	V6PrefixLength    uint32                `json:"v6PrefixLength"`
	VlanId            uint16                `json:"vlanId"`
}

var (
	typeNameIscsiPortal   = "iscsiPortal"
	typeFieldsIscsiPortal = strings.Join([]string{
		"ethernetPort",
		"gateway",
		"id",
		"ipAddress",
		"ipProtocolVersion",
		"iscsiNode",
		"netmask",
		"v6PrefixLength",
		"vlanId",
		"iscsiNode.name",
	}, ",")
)

type IscsiPortalOperatorGen interface {
	NewIscsiPortalById(id string) *IscsiPortal

	GetIscsiPortalById(id string) (*IscsiPortal, error)

	GetIscsiPortals() ([]*IscsiPortal, error)

	FillIscsiPortals(respEntries []*instanceResp) ([]*IscsiPortal, error)

	FilterIscsiPortals(filter *filter) ([]*IscsiPortal, error)
}

// NewIscsiPortalById constructs a `IscsiPortal` object with id.
func (u *Unity) NewIscsiPortalById(
	id string,
) *IscsiPortal {

	return &IscsiPortal{
		Resource: Resource{
			typeName: typeNameIscsiPortal, typeFields: typeFieldsIscsiPortal, Unity: u,
		},
		Id: id,
	}
}

// Refresh updates the info from Unity.
func (r *IscsiPortal) Refresh() error {

	if r.Id == "" {
		return fmt.Errorf(
			"cannot refresh on iscsiPortal without Id nor Name, resource:%v", r,
		)
	}

	var (
		latest *IscsiPortal
		err    error
	)

	switch r.Id {

	default:
		if latest, err = r.Unity.GetIscsiPortalById(r.Id); err != nil {
			return err
		}
		*r = *latest
	}
	return nil
}

// GetIscsiPortalById retrives the `iscsiPortal` by given its id.
func (u *Unity) GetIscsiPortalById(
	id string,
) (*IscsiPortal, error) {

	res := u.NewIscsiPortalById(id)
	err := u.GetInstanceById(res.typeName, id, res.typeFields, res)
	if err != nil {
		if IsUnityError(err) {
			return nil, err
		}
		return nil, errors.Wrap(err, "get iscsiPortal by id failed")
	}
	return res, nil
}

// GetIscsiPortals retrives all `iscsiPortal` objects.
func (u *Unity) GetIscsiPortals() ([]*IscsiPortal, error) {

	return u.FilterIscsiPortals(nil)
}

// FilterIscsiPortals filters the `iscsiPortal` objects by given filters.
func (u *Unity) FilterIscsiPortals(
	filter *filter,
) ([]*IscsiPortal, error) {

	respEntries, err := u.GetCollection(typeNameIscsiPortal, typeFieldsIscsiPortal, filter)
	if err != nil {
		return nil, errors.Wrap(err, "filter iscsiPortal failed")
	}
	res, err := u.FillIscsiPortals(respEntries)
	if err != nil {
		return nil, errors.Wrap(err, "fill iscsiPortals failed")
	}
	return res, nil
}

// FillIscsiPortals generates the `iscsiPortal` objects from collection query response.
func (u *Unity) FillIscsiPortals(
	respEntries []*instanceResp,
) ([]*IscsiPortal, error) {

	resSlice := []*IscsiPortal{}
	for _, entry := range respEntries {
		res := u.NewIscsiPortalById("") // empty id for fake `IscsiPortal` object
		if err := u.unmarshalResource(entry.Content, res); err != nil {
			return nil, errors.Wrap(err, "decode to IscsiPortal failed")
		}
		resSlice = append(resSlice, res)
	}
	return resSlice, nil
}

// Repr represents a `iscsiPortal` object using its id.
func (r *IscsiPortal) Repr() *idRepresent {

	log := logrus.WithField("iscsiPortal", r)
	if r.Id == "" {
		log.Info("refreshing iscsiPortal from unity")
		err := r.Refresh()
		if err != nil {
			log.WithError(err).Error("refresh iscsiPortal from unity failed")
			return nil
		}
	}
	return &idRepresent{Id: r.Id}
}
